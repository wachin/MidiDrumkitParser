using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MIDI_Drumkit_Parser
{
    public static class SonicPiEmitter
    {
        // Tabla de correspondencia entre los nombres de líneas de tab y los samples de Sonic Pi
        private static readonly Dictionary<string, string> SampleNames = new()
        {
            [" S"] = ":drum_snare_hard",
            ["T1"] = ":drum_tom_hi_hard",
            ["T2"] = ":drum_tom_mid_hard",
            ["FT"] = ":drum_tom_lo_hard",
            ["HH"] = ":drum_cymbal_closed",
            ["LC"] = ":drum_cymbal_hard",
            ["RC"] = ":drum_cymbal_hard",
            ["BD"] = ":drum_bass_hard"
        };

        // Genera código Sonic Pi a partir de una tablatura ASCII
        public static void EmitSonicPi()
        {
            // Lee la tablatura desde el archivo tab.txt
            using var reader = new StreamReader("tab.txt");
            using var writer = new StreamWriter("sonicpi.txt");

            var lines = new Dictionary<string, string>();
            double interval = Convert.ToDouble(reader.ReadLine());
            double sqLength = interval / 4; // Longitud de un semiquaver en segundos

            // Procesa cada línea de la tablatura
            while (!reader.EndOfStream)
            {
                string line = reader.ReadLine();
                lines[line.Substring(0, 2)] = line.Substring(3); // Extrae el nombre y los datos de cada línea
            }

            // Genera el código de Sonic Pi
            writer.WriteLine("# Sonic Pi Drumkit Code Generated by MIDI_Drumkit_Parser");
            writer.WriteLine("use_bpm 120");
            writer.WriteLine("live_loop :drumkit do");

            for (int i = 0; i < lines[" S"].Length; i++) // Itera por cada columna de la tablatura
            {
                foreach (var drum in lines.Keys)
                {
                    if (lines[drum][i] != '-')
                    {
                        writer.WriteLine($"  sample {SampleNames[drum]}");
                    }
                }

                writer.WriteLine($"  sleep {sqLength / 1000}"); // Duerme el tiempo correspondiente a un semiquaver
            }

            writer.WriteLine("end");

            Console.WriteLine("Sonic Pi code written to sonicpi.txt.");
        }

        // Muestra la correspondencia entre los nombres de tambores y samples de Sonic Pi
        public static void PrintSampleMapping()
        {
            Console.WriteLine("Sample Mapping for Sonic Pi:");
            foreach (var pair in SampleNames)
            {
                Console.WriteLine($"{pair.Key}: {pair.Value}");
            }
        }

        // Valida la existencia de archivos necesarios y su formato
        public static bool ValidateTabFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                Console.WriteLine($"Error: File {filePath} does not exist.");
                return false;
            }

            try
            {
                using var reader = new StreamReader(filePath);
                string firstLine = reader.ReadLine();
                if (!double.TryParse(firstLine, out _))
                {
                    Console.WriteLine($"Error: First line of {filePath} must be a valid number representing the interval.");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error while validating file {filePath}: {ex.Message}");
                return false;
            }

            return true;
        }
    }
}
